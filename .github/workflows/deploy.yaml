name: deploy sflr-supply-api
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to deploy'
        required: true
        default: 'latest'
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - production
          - staging
          - development
      custom_env:
        description: 'Use custom configuration (JSON format, e.g. {"SFLR_RPC_URL":"https://example.com"})'
        required: false
        default: '{}'

jobs:
  deploy:
    env:
      EXTERNAL_PORT: ${{ github.event.inputs.environment == 'production' && '5360' || github.event.inputs.environment == 'staging' && '5361' || '5362' }}
    name: deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download release binary
        run: |
          if [ "${{ github.event.inputs.tag }}" = "latest" ]; then
            DOWNLOAD_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.assets[0].browser_download_url')
          else
            DOWNLOAD_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag }} | jq -r '.assets[0].browser_download_url')
          fi
          curl -L $DOWNLOAD_URL -o sflr-supply-api
          chmod +x sflr-supply-api
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy using Docker
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          CONTAINER_NAME: sflr-supply-api-${{ github.event.inputs.environment }}
          APP_PORT: '3000'
          CUSTOM_ENV: ${{ github.event.inputs.custom_env }}
        run: |
          ssh-keyscan ${{ vars.SERVER_IP }} >> ~/.ssh/known_hosts
          
          mkdir -p docker-deploy
          
          cat > docker-deploy/Dockerfile << EOF
          FROM debian:bookworm-slim
          WORKDIR /app
          
          # Install dependencies for Rust binaries
          RUN apt-get update && apt-get install -y \
              libssl3 \
              ca-certificates \
              tzdata \
              curl \
              && rm -rf /var/lib/apt/lists/*
          
          COPY sflr-supply-api /app/sflr-supply-api
          RUN chmod +x /app/sflr-supply-api
          
          EXPOSE ${APP_PORT}
          ENV RUST_LOG=info
          
          ENTRYPOINT ["/app/sflr-supply-api"]
          EOF
          
          # Create a basic docker-compose.yml with minimal environment
          cat > docker-deploy/docker-compose.yml << EOF
          version: '3'
          services:
            sflr-supply-api:
              container_name: ${CONTAINER_NAME}
              build: .
              restart: unless-stopped
              ports:
                - "${EXTERNAL_PORT}:${APP_PORT}"
              environment:
                - RUST_LOG=info
                - PORT=${APP_PORT}
          EOF
          
          # Process custom environment variables if provided
          if [ "$CUSTOM_ENV" != "{}" ] && [ -n "$CUSTOM_ENV" ]; then
            echo "Adding custom environment variables"
            
            # Use jq to extract keys and values from the custom environment JSON
            echo $CUSTOM_ENV | jq -r 'to_entries | .[] | "                - " + .key + "=" + .value' >> docker-deploy/docker-compose.yml
          fi
          
          # Copy our binary to the deployment directory
          cp sflr-supply-api docker-deploy/
          
          # Create a deployment script
          cat > docker-deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Stop and remove existing container if it exists
          docker stop ${CONTAINER_NAME} || true
          docker rm ${CONTAINER_NAME} || true
          
          # Build and start the new container
          docker compose up -d --build
          
          # Show logs
          docker logs ${CONTAINER_NAME}
          EOF
          
          chmod +x docker-deploy/deploy.sh
          
          # Create the deployment directory on the server
          ssh ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }} "mkdir -p ~/sflr-supply-api-${ENV_NAME}"
          
          # Copy deployment files
          scp -r docker-deploy/* ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }}:~/sflr-supply-api-${ENV_NAME}/
          
          # Execute the deployment
          ssh ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }} << EOF
            cd ~/sflr-supply-api-${ENV_NAME}
            
            export CONTAINER_NAME=${CONTAINER_NAME}
            
            ./deploy.sh
            
            # Show running containers
            docker ps | grep sflr-supply-api
          EOF
